package pixel_art;

import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.io.File;
import javax.imageio.ImageIO;

public class PixelArt {
	
	// Definimos el tamaÃ±o de la imagen en ancho y alto
	private static int width = 800;
    private static int height = 800;
    
    // Definimos el tamaÃƒÂ±o del pixel
    private static int PIXEL_SIZE = 40;
    private static Graphics2D g;
    
    // Definimos los colores a usar
    static Color white 		= Color.white;
    static Color blue  		= Color.blue;
    static Color red   		= Color.red;
    static Color black      = Color.black;
    static Color darkGreen 	= new Color(11,142,54);
    static Color softGreen 	= new Color(148,193,31);
    static Color redMelon = new Color(231,48,42);
    static Color pink = new Color(245,171,178);
    
    static BufferedImage image = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);
    
    // Definimos la matriz de colores    
    private final static Color[][] PIXELS = {
        {white, white, 	white, 	white, 	white},
        {white, blue, 	blue, 	blue, 	white},
        {white, blue,	red,	blue, 	white},
        {white, blue, 	blue, 	blue, 	white},
        {white, white, 	white, 	white, 	white}
    };
    
    public static void paint() {
    	
    	//Forma sin color
    	drawBackground(PIXEL_SIZE, Color.white);     
        drawHorizontalLine(10, 11, 1, Color.black);
        drawHorizontalLine(9, 12, 2, Color.black);
        drawHorizontalLine(8, 13, 3, Color.black);
        drawHorizontalLine(7, 13, 4, Color.black);
        drawHorizontalLine(6, 13, 5, Color.black);
        drawHorizontalLine(5, 13, 6, Color.black);
        drawHorizontalLine(4, 13, 7, Color.black);
        drawHorizontalLine(3, 13, 8, Color.black);
        drawHorizontalLine(2, 12, 9, Color.black);
        drawHorizontalLine(1, 12, 10, Color.black);
        drawHorizontalLine(1, 11, 11, Color.black);
        drawHorizontalLine(2, 10, 12, Color.black);
        drawHorizontalLine(3, 8, 13, Color.black);
        
       // fillRect(1, 9, 13, 6, Color.black);
        //poniendo Color
        //putPixel(11,1,darkGreen);
        // drawHorizontalLine(8, 9, 3, redMelon);
        //fillRect(10, 15, 4, 2, Color.black);
        // drawVerticalLine(3,16,5,darkOrange);
        
        putPixel(11,1,darkGreen);
        putPixel(10,1,softGreen);
        
        putPixel(9,2,redMelon);
        putPixel(10,2,pink);
        putPixel(11,2,softGreen);
        putPixel(12,2,darkGreen);
        
        drawHorizontalLine(8, 9, 3, redMelon); 
        drawHorizontalLine(10, 11, 3, pink);
        putPixel(12,3,softGreen);
        putPixel(13,3,darkGreen);
        
        drawHorizontalLine(7, 10, 4, redMelon);
        putPixel(11,4,pink);
        putPixel(12,4,softGreen);
        putPixel(13,4,darkGreen);
        
        fillRect(6, 5, 5, 3, redMelon);
        putPixel(5, 6, redMelon);
        drawHorizontalLine(4, 5, 7, redMelon);
        drawVerticalLine(4, 8, 11,pink);
        drawVerticalLine(4, 8, 12,softGreen);
        drawVerticalLine(4, 8, 13,darkGreen);
       
        fillRect(3, 8, 7, 2, redMelon);
        putPixel(2,9, redMelon);
        
        drawVerticalLine(8, 9, 10,pink);
        putPixel(11, 9, softGreen);
        drawVerticalLine(9, 10, 12, darkGreen);
        putPixel(1, 10, softGreen);
        drawHorizontalLine(2, 9, 10, pink);
        drawHorizontalLine(4, 7, 10, redMelon);
        putPixel(10, 10, softGreen);
        drawHorizontalLine(11, 12, 10, darkGreen);
        
        putPixel(1, 11, darkGreen);
        putPixel(2, 11, softGreen);
        drawHorizontalLine(3, 8, 11, pink);
        putPixel(9, 11, softGreen);
        drawHorizontalLine(10, 11, 11, darkGreen);
        
        drawHorizontalLine(2, 10, 12, darkGreen);
        drawHorizontalLine(3, 8, 12, softGreen);
        drawHorizontalLine(3, 8, 13, darkGreen);
        putPixel(9,4,black);
        putPixel(8,6,black);
        putPixel(6,8,black);
        putPixel(4,9,black);
        
        drawSquareGrid(PIXEL_SIZE, Color.black);
        
        // Guardamos la imagen en formato JPG
        try {       
            ImageIO.write(image, "jpg", new File("pixel_art.jpg"));
            System.out.println("EXITO !!!");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    private static void drawVerticalLine(int a, int b, int x, Color c){
   	    g.setColor(c);
    	for(int i=a;i<=b;i++){
    		 putPixel(x, i, c);
        }
    }
    
    private static void drawHorizontalLine(int a, int b, int y, Color c){
    	g.setColor(c);
        for(int i=a;i<=b;i++){
        	 putPixel(i, y, c);
        }
    }
    
    private static void putPixel(int x, int y, Color c){       
	   g.setColor(c);
	   g.fillRect(x * PIXEL_SIZE, y * PIXEL_SIZE, PIXEL_SIZE, PIXEL_SIZE);    
    }
    
    private static void fillRect(int x, int y, int width, int height, Color c){
    	g.setColor(c);
    	g.fillRect(x * PIXEL_SIZE, y * PIXEL_SIZE, width*PIXEL_SIZE, height*PIXEL_SIZE);
    }
    
    private static void drawSquareGrid(int size, Color c) {
    	g.setColor(c);
        for (int i = 0; i < size; i++) {
            for (int j = 0; j < size; j++) { 
                g.drawRect(i * PIXEL_SIZE, j * PIXEL_SIZE, PIXEL_SIZE, PIXEL_SIZE);
            }
        }
    }
    private static void drawBackground(int size, Color c) {
    	g.setColor(c);
    	for (int i = 0; i < size; i++) {
            for (int j = 0; j < size; j++) {
                g.fillRect(i * PIXEL_SIZE, j * PIXEL_SIZE, PIXEL_SIZE, PIXEL_SIZE);                
            }
        }
    }    
    
    public static void main(String[] args) {
        g = image.createGraphics();        
        paint();
    }
}
